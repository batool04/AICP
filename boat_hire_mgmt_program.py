# -*- coding: utf-8 -*-
"""Boat_Hire_mgmt_program.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Ov2YYT6ZxylKSzHL6zF4QxLKWW9Y5GL
"""

"""
The owner of a river boat hire company wants to calculate the daily profits from hiring out 10 rowing boats on the river. Boats are numbered 1 to 10. Boats can be hired for use between 10:00 and 17:00 every day.
Write and test a program for the owner.
Your program must include appropriate prompts for the entry of data.
Error messages and other output need to be set out clearly and understandably. All variables, constants and other identifiers must have meaningful names.

You will need to complete these three tasks. Each task must be fully tested.

TASK 1 – calculate the money taken in a day for one boat.

The cost of hiring a boat is $20 for one hour or $12 for half an hour. When a boat is hired the payment is added to the money taken for the day. The running total of hours hired that day is updated and the time when the boat must be returned is stored. At the end of the day the money taken and the total hours hired is output.
No boat can be hired before 10:00 or returned after 17:00.

TASK 2 – find the next boat available.

Extend TASK 1 to work for all 10 rowing boats. Use the data stored for each boat to find out how many boats are available for hire at the current time. If no boats are available show the earliest time that a boat will be available for hire.

TASK 3 – calculate the money taken for all the boats at the end of the day.

At the end of the day use the data stored for each boat to calculate the total amount of money taken and the total number of hours boats were hired that day. Find out how many boats were not used that day and which boat was used the most. Provide a report for the owner to show this information.
"""
#===========================================================================================================================================================================================

#Task1:
#Code:

HOURLY_RATE = 20
HALF_HOUR_RATE = 12
OPENING_TIME = 10
CLOSING_TIME = 17

money_taken = 0
total_hours_hired = 0

# Function to calculate money taken for one boat
def calculate_money_for_boat(boat_number, start_time, duration):
    global money_taken, total_hours_hired

    print(f"\nBoat {boat_number}:")

    # Validate start time and duration
    if OPENING_TIME <= start_time <= CLOSING_TIME and 0.5 <= duration <= 7:
        cost = duration * (HOURLY_RATE if duration <= 1 else HALF_HOUR_RATE)
        money_taken += cost
        total_hours_hired += duration
        print(f"Cost for Boat {boat_number}: ${cost:.2f}")
        print(f"Total hours hired for Boat {boat_number}: {total_hours_hired:.2f}")
    else:
        print("Error: Invalid start time or duration.")

# Main program
while True:
    boat_num_str = input("Enter boat number (or 'done' to finish): ")

    if boat_num_str.lower() == 'done':
        break

    try:
        boat_num = int(boat_num_str)
        start_time = float(input(f"Enter start time for Boat {boat_num} (in 24-hour format): "))
        duration = float(input(f"Enter duration for Boat {boat_num} in hours: "))
        calculate_money_for_boat(boat_num, start_time, duration)
    except ValueError:
        print("Invalid input. Please enter a valid boat number.")

# Output at the end of the day
print("\nEnd of the day:")
print(f"Total money taken: ${money_taken:.2f}")
print(f"Total hours hired for all boats: {total_hours_hired:.2f}")


#------------------------------------------------------------------------------------------------------------------------------------------------------------


#Task2:
#Code:

HOURLY_RATE = 20
HALF_HOUR_RATE = 12
OPENING_TIME = 10
CLOSING_TIME = 17

money_taken = 0
total_hours_hired = 0

# Dictionary to store data for each boat
boat_data = {i: {'return_time': OPENING_TIME, 'hours_hired': 0} for i in range(1, 11)}

# Function to calculate money taken for one boat
def calculate_money_for_boat(boat_number, start_time, duration):
    global money_taken, total_hours_hired

    print(f"\nBoat {boat_number}:")

    # Validate start time and duration
    if OPENING_TIME <= start_time <= CLOSING_TIME and 0.5 <= duration <= 7:
        # Calculate cost
        cost = duration * (HOURLY_RATE if duration <= 1 else HALF_HOUR_RATE)
        money_taken += cost
        total_hours_hired += duration

        # Update boat data
        boat_data[boat_number]['return_time'] = start_time + duration
        boat_data[boat_number]['hours_hired'] += duration

        print(f"Cost for Boat {boat_number}: ${cost:.2f}")
        print(f"Total hours hired for Boat {boat_number}: {boat_data[boat_number]['hours_hired']:.2f}")
    else:
        print("Error: Invalid start time or duration.")

# Function to find the next available boat
def find_next_available_boat(current_time):
    available_boats = [boat for boat, data in boat_data.items() if data['return_time'] <= current_time]

    if available_boats:
        print(f"\nAvailable boats at {current_time:.2f} hours: {available_boats}")
    else:
        next_available_time = min(boat_data.values(), key=lambda x: x['return_time'])['return_time']
        print(f"\nNo boats available. Next available time is at {next_available_time:.2f} hours.")

# Main program
while True:
    boat_num_str = input("Enter boat number (or 'done' to finish): ")

    if boat_num_str.lower() == 'done':
        break

    try:
        boat_num = int(boat_num_str)
        start_time = float(input(f"Enter start time for Boat {boat_num} (in 24-hour format): "))
        duration = float(input(f"Enter duration for Boat {boat_num} in hours: "))
        calculate_money_for_boat(boat_num, start_time, duration)
    except ValueError:
        print("Invalid input. Please enter a valid boat number.")

# Get the current time
current_time = float(input("Enter the current time (in 24-hour format) to check boat availability: "))
find_next_available_boat(current_time)

# Output at the end of the day
print("\nEnd of the day:")
print(f"Total money taken: ${money_taken:.2f}")
print(f"Total hours hired for all boats: {total_hours_hired:.2f}")

#----------------------------------------------------------------------------------------------------------------------------------------------------------------


#Task3:
#Code:

HOURLY_RATE = 20
HALF_HOUR_RATE = 12
OPENING_TIME = 10
CLOSING_TIME = 17

money_taken = 0
total_hours_hired = 0

# Dictionary to store data for each boat
boat_data = {i: {'return_time': OPENING_TIME, 'hours_hired': 0} for i in range(1, 11)}

# Function to calculate money taken for one boat
def calculate_money_for_boat(boat_number, start_time, duration):
    global money_taken, total_hours_hired

    print(f"\nBoat {boat_number}:")

    # Validate start time and duration
    if OPENING_TIME <= start_time <= CLOSING_TIME and 0.5 <= duration <= 7:
        # Calculate cost
        cost = duration * (HOURLY_RATE if duration <= 1 else HALF_HOUR_RATE)
        money_taken += cost
        total_hours_hired += duration

        # Update boat data
        boat_data[boat_number]['return_time'] = start_time + duration
        boat_data[boat_number]['hours_hired'] += duration

        print(f"Cost for Boat {boat_number}: ${cost:.2f}")
        print(f"Total hours hired for Boat {boat_number}: {boat_data[boat_number]['hours_hired']:.2f}")
    else:
        print("Error: Invalid start time or duration.")


# Function to calculate money taken for all boats at the end of the day
def calculate_money_for_all_boats():
    print("\nEnd of the day report:")
    print(f"Total money taken: ${money_taken:.2f}")
    print(f"Total hours hired for all boats: {total_hours_hired:.2f}")

    unused_boats = [boat for boat, data in boat_data.items() if data['hours_hired'] == 0]
    if unused_boats:
        print(f"Boats not used today: {unused_boats}")
    else:
        print("All boats were used today.")

    most_used_boat = max(boat_data, key=lambda x: boat_data[x]['hours_hired'])
    print(f"Boat {most_used_boat} was used the most, for a total of {boat_data[most_used_boat]['hours_hired']:.2f} hours.")

# Main program
while True:
    boat_num_str = input("Enter boat number (or 'done' to finish): ")

    if boat_num_str.lower() == 'done':
        break

    try:
        boat_num = int(boat_num_str)
        start_time = float(input(f"Enter start time for Boat {boat_num} (in 24-hour format): "))
        duration = float(input(f"Enter duration for Boat {boat_num} in hours: "))
        calculate_money_for_boat(boat_num, start_time, duration)
    except ValueError:
        print("Invalid input. Please enter a valid boat number.")


# Output at the end of the day
calculate_money_for_all_boats()